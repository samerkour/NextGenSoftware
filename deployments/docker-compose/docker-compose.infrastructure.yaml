version: "3.8"
name: NextGen-microservices

services:
  #######################################################
  #  rabbitmq
  #######################################################
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: on-failure
    ports:
      - ${RABBITMQ_HOST_PORT:-5672}:${RABBITMQ_PORT:-5672}
      - ${RABBITMQ_HOST_API_PORT:-15672}:${RABBITMQ_API_PORT:-15672}
      # volumes:
      #   - rabbitmq:/var/lib/rabbitmq
    networks:
      - NextGen

    #######################################################
    #  mongo
    #######################################################
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: on-failure
    # https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS:-admin}
    ports:
      - ${MONGO_HOST_PORT:-27017}:${MONGO_PORT:-27017}
    networks:
      - NextGen

    #######################################################
    #  sqlserver
    #######################################################
  sqlserver:
    image: sqlserver:latest
    container_name: sqlserver
    restart: on-failure
    ports:
      - ${POSTGRES_HOST_PORT:-5432}:${POSTGRES_PORT:-5432}
    #https://docs.docker.com/compose/environment-variables/env-file/#parameter-expansion
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-sqlserver}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sqlserver}
    networks:
      - NextGen

  # #######################################################
  # #  eventstore-db
  # #######################################################
  # # https://developers.eventstore.com/server/v21.10/installation.html#insecure-single-node
  # # https://hub.docker.com/r/eventstore/eventstore/tags
  # # https://stackoverflow.com/questions/65272764/ports-are-not-available-listen-tcp-0-0-0-0-50070-bind-an-attempt-was-made-to
  # # EVENTSTORE_MEM_DB=true, it tells the EventStoreDB container to use an in-memory database, which means that any data stored in EventStoreDB will not be persisted between container restarts. Once the container is stopped or restarted, all data will be lost.
  # eventstore:
    # image: eventstore/eventstore:latest
    # container_name: eventstore
    # restart: on-failure
    # environment:
      # - EVENTSTORE_CLUSTER_SIZE=1
      # - EVENTSTORE_RUN_PROJECTIONS=All
      # - EVENTSTORE_START_STANDARD_PROJECTIONS=false
      # - EVENTSTORE_EXT_TCP_PORT=1113
      # - EVENTSTORE_HTTP_PORT=2113
      # - EVENTSTORE_INSECURE=true
      # - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      # - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
      # - EVENTSTORE_MEM_DB=true
    # ports:
      # - "1113:1113"
      # - ${EVENTSTORE_HOST_PORT:-2113}:${EVENTSTORE_PORT:-2113}
    # volumes:
      # - type: volume
        # source: eventstore-volume-data
        # target: /var/lib/eventstore
      # - type: volume
        # source: eventstore-volume-logs
        # target: /var/log/eventstore
    # networks:
      # - NextGen

  #   #######################################################
  #   #  Redis
  #   #######################################################

  ## https://developer.redis.com/howtos/quick-start
  ## redis-stack is a image with redis modules enabled like JSON module
  # redis:
  #   image: redis/redis-stack:latest
  #   container_name: redis
  #   restart: unless-stopped
  #   networks:
  #     - NextGen
  #   ports:
  #     - 6379:6379

  # #######################################################
  # #  Portainer
  # #######################################################
  # # https://bobcares.com/blog/install-portainer-docker-compose/
  # portainer:
  #   image: portainer/portainer-ce:latest
  #   container_name: portainer
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./portainer-data:/data
  #   ports:
  #     - 9000:9000
  #   networks:
  #     - NextGen

  #   #######################################################
  #   #  elasticsearch
  #   #######################################################
  # elasticsearch:
  #   container_name: elastic_search
  #   restart: on-failure
  #   image: elasticsearch:8.13.1
  #   environment:
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - xpack.monitoring.enabled=true
  #     - xpack.watcher.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - elastic-data:/usr/share/elasticsearch/data
  #   ports:
  #     - ${ELASTIC_HOST_PORT:-9200}:${ELASTIC_PORT:-9200}
  #     - 9300:9300
  #   networks:
  #     - NextGen

  #   #######################################################
  #   #  kibana
  #   #######################################################
  # kibana:
  #   image: kibana:8.13.1
  #   container_name: kibana
  #   restart: on-failure
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elastic_search:9200
  #   ports:
  #     - ${KIBANA_HOST_PORT:-5601}:${KIBANA_PORT:-5601}
  #   networks:
  #     - NextGen
  #   depends_on:
  #     - elasticsearch

  # jaeger:
  #   container_name: jaeger
  #   restart: on-failure
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "16686:16686"
  #     - "14268:14268"
  #     - "14250:14250"
  #   networks:
  #     - NextGen

  #   #######################################################
  #   #  zipkin
  #   #######################################################
  # zipkin:
  #   image: openzipkin/zipkin:latest
  #   restart: on-failure
  #   container_name: zipkin
  #   ports:
  #     - "9411:9411"
  #   networks:
  #     - NextGen

  #   #######################################################
  #   #  otel-collector
  #   #######################################################
  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib-dev:latest
  #   command: ["--config=/etc/otel-collector-config.yaml", ""]
  #   volumes:
  #     - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
  #   ports:
  #     - "1888:1888" # pprof extension
  #     - "8888:8888" # Prometheus metrics exposed by the collector
  #     - "8889:8889" # Prometheus exporter metrics
  #     - "13133:13133" # health_check extension
  #     - "4317:4317" # OTLP gRPC receiver
  #     - "55679:55679" # zpages extension
  #   depends_on:
  #     - jaeger
  #     - zipkin
  #   networks:
  #     - NextGen

  #   #######################################################
  #   # prometheus
  #   #######################################################
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   restart: on-failure
  #   user: root
  #   ports:
  #     - ${PROMETHEUS_HOST_PORT:-9090}:${PROMETHEUS_PORT:-9090}
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   networks:
  #     - NextGen

  #   #######################################################
  #   # node_exporter
  #   #######################################################
  # node_exporter:
  #   container_name: node_exporter
  #   restart: on-failure
  #   image: prom/node-exporter
  #   ports:
  #     - "9101:9100"
  #   networks:
  #     - NextGen

  #   #######################################################
  #   # grafana
  #   #######################################################
  # grafana:
  #   container_name: grafana
  #   restart: on-failure
  #   image: grafana/grafana:latest
  #   ports:
  #     - ${GRAFANA_HOST_PORT:-3000}:${GRAFANA_PORT:-3000}
  #   networks:
  #     - NextGen

  # #######################################################
  # # seq
  # #######################################################
  # seq:
  #   image: datalust/seq:latest
  #   container_name: seq
  #   restart: on-failure
  #   ports:
  #     - 8081:80
  #     - 5341:5341
  #   environment:
  #     ACCEPT_EULA: Y
  #   networks:
  #     - NextGen

# https://docs.docker.com/compose/networking/
# https://docs.docker.com/engine/reference/commandline/network_create/
# https://docs.docker.com/compose/compose-file/#networks-top-level-element
# https://stackoverflow.com/questions/38088279/communication-between-multiple-docker-compose-projects
# We could use also a predefined network and connect to that predefined network with specifying the 'name' of existing network and set 'external' attribute to true
# When we run docker-compose up, Docker Compose will check if the 'NextGen' network already exists. If it does not exist, it will create the 'NextGen' network. If it exists, it will use the existing 'NextGen' network. problem is that if we do a docker-compose down this network will delete and other docker-compose that use same network will fail because network deleted so its better we use `external` keyword for using a predefined network
networks:
  NextGen:
    name: NextGen
    driver: bridge

volumes:
  eventstore-volume-data:
  eventstore-volume-logs:
  elastic-data:
